/*
* Copyright LABGeM (2016)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;

import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.logic.TruthValuePowerSet;
import fr.cea.ig.grools.fact.PriorKnowledge;

import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;

global ch.qos.logback.classic.Logger logger;

dialect "java"

rule "Leaf prior-knowledge with no prediction" agenda-group  "observation" when
    $pk: PriorKnowledge( prediction == TruthValuePowerSet.n )
    not(    Relation(   source isA Observation.class,
                        target == $pk,
                        type ( == ObservationType.COMPUTATION || == ObservationType.ANNOTATION)
                    )
        )
    not(    Relation(   source isA PriorKnowledge.class,
                        target == $pk
                    )
        )
then
    modify( $pk ){
        setPrediction( TruthValuePowerSet.N )
    };
end

rule "Prediction set to prior-knowledge" agenda-group  "observation" when
    $pk: PriorKnowledge()
    $observations: Set( size > 0 ) from accumulate(     $rel: Relation( source isA Observation.class,
                                                                        target == $pk,
                                                                        type ( == ObservationType.COMPUTATION || == ObservationType.ANNOTATION) ),
                                                        init  ( Set observations =  new HashSet();  ),
                                                        action( observations.add( $rel.getSource() ); ),
                                                        result( observations )
                                                      )
    $predictionSet:         TruthValueSet( this == Observation.union( $observations ) )
    $predictionSuperSet:    TruthValuePowerSet( this != $pk.getPrediction(),
                                                this == TruthValueSet.union( $predictionSet ) )
    $pk_parents: Set( ) from accumulate(   $rel: Relation(  target isA PriorKnowledge.class,
                                                            source == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getTarget() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setPrediction( $predictionSuperSet )
    };
    for( final Object obj : $pk_parents){
        final PriorKnowledge parent = (PriorKnowledge)obj;
        modify(parent){ setPrediction( TruthValuePowerSet.n )};
    }
end

rule "Top prior-knowledge with no expectation" agenda-group  "observation" when
    $pk: PriorKnowledge( expectation == TruthValuePowerSet.n )
    not(    Relation(   source isA Observation.class,
                        target == $pk,
                        type ( == ObservationType.EXPERIMENTATION || == ObservationType.ANNOTATION)
                    )
        )
    not(    Relation(   target isA PriorKnowledge.class,
                        source == $pk
                    )
        )
then
    modify( $pk ){
        setExpectation( TruthValuePowerSet.N )
    };
end


rule "Expectation set to prior-knowledge" agenda-group "observation" when
    $pk: PriorKnowledge()
    $observations: Set( size > 0 ) from accumulate(   $rel: Relation(   source isA Observation.class,
                                                                        target == $pk,
                                                                        type ( == ObservationType.EXPERIMENTATION || == ObservationType.ANNOTATION) ),
                                                        init  ( Set observations =  new HashSet();  ),
                                                        action( observations.add( $rel.getSource() ); ),
                                                        result( observations )
                                                     )
    $expectationSet:        TruthValueSet( this == Observation.union( $observations ) )
    $expectationSuperSet:   TruthValuePowerSet( this != $pk.getExpectation(),
                                                this == TruthValueSet.union( $expectationSet ) )
    $pk_children: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge.class, target == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getSource() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setExpectation( $expectationSuperSet )
    };
    for( final Object obj : $pk_children){
        final PriorKnowledge child = (PriorKnowledge)obj;
        modify(child){ setExpectation( TruthValuePowerSet.n )};
    }
end


rule "Prior-knowledge has any prediction" agenda-group  "finisher" when
    $pk: PriorKnowledge( prediction == TruthValuePowerSet.n )
then
    modify($pk){
        setPrediction( TruthValuePowerSet.N )
    };
end


rule "Prior-knowledge has any expectation" agenda-group  "finisher" when
    $pk: PriorKnowledge( expectation == TruthValuePowerSet.n )
then
    modify($pk){
        setExpectation( TruthValuePowerSet.N )
    };
end
