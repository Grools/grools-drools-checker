/*
* Copyright LABGeM (2014)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;
import fr.cea.ig.grools.fact.Concept;
import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.PriorKnowledge;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.fact.RelationImpl;
import fr.cea.ig.grools.logic.Conclusion;
import fr.cea.ig.grools.logic.Math;
import fr.cea.ig.grools.logic.TruthValue;
import fr.cea.ig.grools.logic.TruthValueSet;
import fr.cea.ig.grools.logic.TruthValuePowerSet;

rule "Priorknowledge is Confirmed Presence"  agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.T) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.T) )
then
    modify( $pk ){
        setConclusion( Conclusion.CONFIRMED_PRESENCE)
    };
end

rule "Priorknowledge is Unexpected Absence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.NF, TruthValuePowerSet.NFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NTFB, TruthValuePowerSet.TF, TruthValuePowerSet.TFB ) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.T, TruthValuePowerSet.NT) )
then
    modify( $pk ){
        setConclusion( Conclusion.UNEXPECTED_ABSENCE)
    };
end

rule "Priorknowledge is Contradictory Absence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.B, TruthValuePowerSet.TB))
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.T, TruthValuePowerSet.NT) )
then
    modify( $pk ){
        setConclusion( Conclusion.CONTRADICTORY_ABSENCE)
    };
end

rule "Priorknowledge is Mising" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in ( TruthValuePowerSet.n, TruthValuePowerSet.N, TruthValuePowerSet.NT ) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in ( TruthValuePowerSet.T, TruthValuePowerSet.NT ) )
then
    modify( $pk ){
        setConclusion( Conclusion.MISSING)
    };
end

rule "Priorknowledge is Unexpected Presence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this == TruthValuePowerSet.T )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
then
    modify( $pk ){
        setConclusion( Conclusion.UNEXPECTED_PRESENCE)
    };
end

rule "Priorknowledge is Confirmed Absence"agenda-group  "conclusion"  when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
then
    modify( $pk ){
        setConclusion( Conclusion.CONFIRMED_ABSENCE)
    };
end

rule "Priorknowledge is Contradictory Presence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in ( TruthValuePowerSet.B, TruthValuePowerSet.TB ) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
then
    modify( $pk ){
        setConclusion( Conclusion.CONTRADICTORY_PRESENCE)
    };
end

rule "Priorknowledge is Absent" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.n, TruthValuePowerSet.N, TruthValuePowerSet.NT, TruthValuePowerSet.NB, TruthValuePowerSet.NTB))
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
then
    modify( $pk ){
        setConclusion( Conclusion.ABSENT)
    };
end
rule "Priorknowledge is Ambiguous Presence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this == TruthValuePowerSet.T)
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in ( TruthValuePowerSet.B, TruthValuePowerSet.NB, TruthValuePowerSet.NTB, TruthValuePowerSet.TB)  )
then
    modify( $pk ){
        setConclusion( Conclusion.AMBIGUOUS_PRESENCE)
    };
end

rule "Priorknowledge is Ambiguous Absence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.B, TruthValuePowerSet.TB, TruthValuePowerSet.NTB, TruthValuePowerSet.NB) )
then
    modify( $pk ){
        setConclusion( Conclusion.AMBIGUOUS_ABSENCE)
    };
end

rule "Priorknowledge is Ambiguous Contradiction" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.B, TruthValuePowerSet.TB) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.B, TruthValuePowerSet.TB, TruthValuePowerSet.NTB, TruthValuePowerSet.NB) )
then
    modify( $pk ){
        setConclusion( Conclusion.AMBIGUOUS_CONTRADICTORY)
    };
end

rule "Priorknowledge is Ambiguous" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.n, TruthValuePowerSet.N, TruthValuePowerSet.NTB, TruthValuePowerSet.NT, TruthValuePowerSet.NB ) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.B, TruthValuePowerSet.NB, TruthValuePowerSet.NTB, TruthValuePowerSet.TB )  )
then
    modify( $pk ){
        setConclusion( Conclusion.AMBIGUOUS)
    };
end

rule "Priorknowledge is Unconfirmed Presence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this  == TruthValuePowerSet.T )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in ( TruthValuePowerSet.n, TruthValuePowerSet.N, TruthValuePowerSet.NB, TruthValuePowerSet.NT, TruthValuePowerSet.NTB ) )
then
    modify( $pk ){
        setConclusion( Conclusion.UNCONFIRMED_PRESENCE)
    };
end

rule "Priorknowledge is Unconfirmed Absence" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.F, TruthValuePowerSet.FB, TruthValuePowerSet.TF, TruthValuePowerSet.NTFB, TruthValuePowerSet.NTF, TruthValuePowerSet.NFB, TruthValuePowerSet.NF, TruthValuePowerSet.TFB) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in ( TruthValuePowerSet.n, TruthValuePowerSet.N, TruthValuePowerSet.NB, TruthValuePowerSet.NT, TruthValuePowerSet.NTB ) )
then
    modify( $pk ){
        setConclusion( Conclusion.UNCONFIRMED_ABSENCE)
    };
end

rule "Priorknowledge is Unconfirmed Contradictory" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in ( TruthValuePowerSet.B, TruthValuePowerSet.TB ))
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in ( TruthValuePowerSet.n, TruthValuePowerSet.N, TruthValuePowerSet.NB, TruthValuePowerSet.NT, TruthValuePowerSet.NTB ) )
then
    modify( $pk ){
        setConclusion( Conclusion.UNCONFIRMED_CONTRADICTORY)
    };
end

rule "Priorknowledge is Unexplained" agenda-group  "conclusion" when
    $pk: PriorKnowledge( )
    $prediction:  TruthValuePowerSet( this == $pk.getPrediction(),  this in (TruthValuePowerSet.n, TruthValuePowerSet.N) )
    $expectation: TruthValuePowerSet( this == $pk.getExpectation(), this in (TruthValuePowerSet.n, TruthValuePowerSet.N) )
then
    modify( $pk ){
        setConclusion( Conclusion.UNEXPLAINED)
    };
end