/*
* Copyright LABGeM (2016)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;

import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationImpl;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.logic.TruthValuePowerSet;
import fr.cea.ig.grools.fact.PriorKnowledge;
import fr.cea.ig.grools.drools.Message;

import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.lang.Float;

global ch.qos.logback.classic.Logger logger;

dialect "java"

rule "PriorKnowledge is a leaf" no-loop true agenda-group "observation" when
    // Select any prior-knowledge
    $pk: PriorKnowledge()
    not( Relation( source isA PriorKnowledge, target == $pk, type ( == RelationType.PART || == RelationType.SUBTYPE ) ) )
    // Select all predictions linked to $pk
    $obsToPk    : Set( ) from collect( Relation(    source isA Observation,
                                                    target == $pk,
                                                    type ( == ObservationType.COMPUTATION || == ObservationType.CURATION ) ) )
    $obsSet : Set() from accumulate( $rel: Relation(  ) from $obsToPk,
                                        init  ( Set set =  new HashSet(); ),
                                        action( set.add( $rel.getSource() ); ),
                                        result( set ) )
    $directPrediction: TruthValueSet(  ) from accumulate(   $obs: Observation( ) from $obsSet ,
                                                                init  ( EnumSet set =  EnumSet.noneOf(TruthValue.class);  ),
                                                                action( set.add( $obs.getTruthValue() ); ),
                                                                result( TruthValue.union( set ) ) )
    $result: TruthValuePowerSet( this != $pk.getPrediction(), this == TruthValueSet.union( $directPrediction ) )
then
    logger.debug( $pk.getName()+" is leaf and his direct prediction is " +$directPrediction );
    modify( $pk ){
        setPrediction( $result )
    };
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("prediction inference").setFocus();
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("qualifier mark").setFocus();
end

rule "Expectable is a top" no-loop true  agenda-group "observation" when
    // Select any prior-knowledge
    $pk: PriorKnowledge()
    not( Relation( target isA PriorKnowledge, source == $pk, type ( == RelationType.PART || == RelationType.SUBTYPE ) ) )
    // Select all predictions linked to $pk
    $obsToPk    : Set( ) from collect( Relation(    source isA Observation,
                                                    target == $pk,
                                                    type ( == ObservationType.EXPERIMENTATION || == ObservationType.CURATION ) ) )
    $obsSet : Set() from accumulate( $rel: Relation(  ) from $obsToPk,
                                        init  ( Set set =  new HashSet(); ),
                                        action( set.add( $rel.getSource() ); ),
                                        result( set ) )
    $directExpectation: TruthValueSet(  ) from accumulate(   $obs: Observation( ) from $obsSet ,
                                                                init  ( EnumSet set =  EnumSet.noneOf(TruthValue.class);  ),
                                                                action( set.add( $obs.getTruthValue() ); ),
                                                                result( TruthValue.union( set ) ) )
    $result: TruthValuePowerSet( this != $pk.getExpectation(), this == TruthValueSet.union( $directExpectation ) )
    $pk_children: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge, target == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getSource() ); ),
                                            result( set ) )
then
    logger.debug( $pk.getName()+" is top and his direct expectation is " + $directExpectation);
    modify( $pk ){
        setExpectation( $result )
    };
    for( final Object obj : $pk_children){
        final PriorKnowledge child = (PriorKnowledge)obj;
        update(child);
    }
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("conclusion").setFocus();
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("expectation inference").setFocus();
end

rule "Prior-knowledge has the greatest truth degree value from all his brothers" no-loop true agenda-group "qualifier mark" when
    $pk: PriorKnowledge( prediction != TruthValuePowerSet.n )
    // take the parent prior-knowledge of $pk
    $relation: Relation(    target      isA PriorKnowledge,
                            source      ==  $pk,
                            qualifiers  not contains Qualifier.GREATEST_TRUTH_DEGREE,
                            type        ( ==  RelationType.SUBTYPE || == RelationType.PART ) )
    $parent: PriorKnowledge( this == $relation.getTarget() )
    // Select all children of parent, $pk included
    $children_of_parent: Set( ) from accumulate(    $rel: Relation(  source isA PriorKnowledge, target == $parent, type == $relation.getType() ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add(  $rel.getSource() ); ),
                                                    result( set ) )
    // All children prediction are inferred
    forall( PriorKnowledge( prediction != TruthValuePowerSet.n, prediction.getTruth() <= $pk.getPrediction().getTruth()  ) from $children_of_parent )
    // and $pk has the one of greatest truth value degree from his prediction compared to all others children
    $truths: Set() from collect( PriorKnowledge( prediction.getTruth() == $pk.getPrediction().getTruth() ) from $children_of_parent )
    forall( PriorKnowledge( prediction.size() >= $pk.getPrediction().size() ) from $truths )
then
    logger.debug( $pk.getName()+" is link to " + $parent.getName()+" with the greatest truth degree value from all his brothers");
    EnumSet<Qualifier> qualifiers = $relation.getQualifiers();
    qualifiers.add( Qualifier.GREATEST_TRUTH_DEGREE );
    modify($relation){
        setQualifiers( qualifiers )
    };
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("expectation inference").setFocus();
end

rule "Prior-knowledge has the smallest truth degree value from all his brothers" no-loop true agenda-group "qualifier mark" when
    $pk: PriorKnowledge( prediction != TruthValuePowerSet.n )
    // take the parent prior-knowledge of $pk
    $relation: Relation(    target        isA PriorKnowledge,
                            source        ==  $pk,
                            qualifiers    not contains  Qualifier.SMALLEST_TRUTH_DEGREE,
                            type        ( ==  RelationType.SUBTYPE || == RelationType.PART ) )
    $parent: PriorKnowledge( this == $relation.getTarget() )
    // Select all children of parent, $pk included
    $children_of_parent: Set( ) from accumulate(    $rel: Relation(  source isA PriorKnowledge, target == $parent, type == $relation.getType() ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add(  $rel.getSource() ); ),
                                                    result( set ) )
    // All children prediction are inferred
    forall( PriorKnowledge( prediction != TruthValuePowerSet.n, prediction.getTruth() >= $pk.getPrediction().getTruth() ) from $children_of_parent )
    // $pk has the one of greatest truth value degree from his prediction compared to all others children
    $truths: Set() from collect( PriorKnowledge( prediction.getTruth() == $pk.getPrediction().getTruth() ) from $children_of_parent )
    forall( PriorKnowledge( prediction.size() <= $pk.getPrediction().size() ) from $truths )
then
    logger.debug( $pk.getName()+" is link to " + $parent.getName()+" with the smallest truth degree value from all his brothers");
    EnumSet<Qualifier> qualifiers = $relation.getQualifiers();
    qualifiers.add( Qualifier.SMALLEST_TRUTH_DEGREE );
    modify($relation){
        setQualifiers( qualifiers )
    };
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("expectation inference").setFocus();
end


rule "Prior-knowledge is not the smallest and not the greatest truth degree value from all his brothers" no-loop true agenda-group "qualifier mark" when
    $pk: PriorKnowledge( prediction != TruthValuePowerSet.n )
    // take the parent prior-knowledge of $pk
    $relation: Relation(    target        isA PriorKnowledge,
                            source        ==  $pk,
                            qualifiers    not contains Qualifier.NOR_GREATEST_NOR_TRUTH_FALSEHOOD_DEGREE,
                            type        ( ==  RelationType.SUBTYPE || == RelationType.PART ) )
    $parent: PriorKnowledge( this == $relation.getTarget() )
    // Select all children of parent, $pk included
    $children_of_parent: Set( ) from accumulate(    $rel: Relation(  source isA PriorKnowledge, target == $parent, type == $relation.getType() ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add(  $rel.getSource() ); ),
                                                    result( set ) )
    // $pk has the one of greatest truth value degree from his prediction compared to all others children
    forall( PriorKnowledge( prediction != TruthValuePowerSet.n ) from $children_of_parent )
    exists( PriorKnowledge( prediction.getTruth() > $pk.getPrediction().getTruth() ) from $children_of_parent )
    exists( PriorKnowledge( prediction.getTruth() < $pk.getPrediction().getTruth() ) from $children_of_parent )
then
    logger.debug( $pk.getName()+" is link to " + $parent.getName()+" with not the smallest and not the greatest truth degree value from all his brothers");
    modify($relation){
        setQualifiers( EnumSet.of( Qualifier.NOR_GREATEST_NOR_TRUTH_FALSEHOOD_DEGREE ) )
    };
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("expectation inference").setFocus();
end