/*
* Copyright LABGeM (2014)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;
import fr.cea.ig.grools.fact.Concept;
import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.PriorKnowledge;
import fr.cea.ig.grools.fact.PredictionSet;
import fr.cea.ig.grools.fact.ExpectationSet;
import fr.cea.ig.grools.fact.Predictable;
import fr.cea.ig.grools.fact.Expectable;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.fact.RelationImpl;
import fr.cea.ig.grools.logic.TruthValue;
import fr.cea.ig.grools.logic.TruthValueSet;
import fr.cea.ig.grools.logic.TruthValuePowerSet;

import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;

global ch.qos.logback.classic.Logger logger;

dialect "java"


rule "Prior-knowledge has a group of predictable part with any specific predicted [prediction]" agenda-group "prior-knowledge prediction" when
    // Select any prior-knowledge
    $pk: PriorKnowledge()
    // take the prior-knowledge list, where each concept is a child of $pk and linked by a the relation part-of
    $children: Set( size > 0 ) from accumulate(   $rel: Relation(   source isA PriorKnowledge,
                                                                    target == $pk,
                                                                    type   == RelationType.PART ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( if( ((PriorKnowledge)$rel.getSource()).getIsDispensable() == false )
                                                                set.add( $rel.getSource() );  ),
                                                    result( set )
                                                 )

    // all children prediction is computed
    not( PriorKnowledge( prediction == TruthValuePowerSet.n ) from $children )

    // Any concept from children is specific ( this need to be always true in normal mode )
    not( PriorKnowledge( isSpecific == true, prediction == TruthValuePowerSet.T ) from $children )

    // Merge all prediction from children together (example: {{N}} merged with {{T}} give {{N},{T}})
    $predictionFromChildren: TruthValuePowerSet(  ) from accumulate( $child: PriorKnowledge( ) from $children,
                                                                                                init  ( EnumSet truthfulness = EnumSet.noneOf( TruthValuePowerSet.class );  ),
                                                                                                action( truthfulness.add( $child.getPrediction() ); ),
                                                                                                result( TruthValuePowerSet.merge( truthfulness ) )
                                                                                              )
    // Select the relation which link a prediction set to $pk
    $predToPk: Relation( source isA PredictionSet, target == $pk, type == RelationType.PREDICTION )
    // Add the direct prediction to merged set of all prediction from children ( example: {{T}} add {N} give {{T}})
    $directPrediction: TruthValueSet( this == ((PredictionSet)$predToPk.getSource()).getPrediction() )
    $result: TruthValuePowerSet( this != $pk.getPrediction(), this == TruthValuePowerSet.add( $predictionFromChildren, $directPrediction ) )

    $pk_parents: Set( ) from accumulate(   $rel: Relation(  target isA PriorKnowledge,
                                                            source == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getTarget() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setPrediction( $result )
    };
    for( final Object obj : $pk_parents){
        final PriorKnowledge parent = (PriorKnowledge)obj;
        update(parent);
    }
end


rule "Prior-knowledge has a group of predictable part with at least one specific and predicted [prediction]" agenda-group "prior-knowledge prediction" when
    // Select any prior-knowledge
    $pk: PriorKnowledge()
    // take the prior-knowledge list, where each concept is a child of $pk and linked by a the relation part-of
    $children: Set( size > 0 ) from accumulate(   $rel: Relation(   source isA PriorKnowledge,
                                                                    target == $pk,
                                                                    type   == RelationType.PART ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( if( ((PriorKnowledge)$rel.getSource()).getIsDispensable() == false )
                                                                                                                            set.add( $rel.getSource() );  ),
                                                    result( set )
                                               )

    // all children prediction is computed
    not( PriorKnowledge( prediction == TruthValuePowerSet.n ) from $children )

    // At least one prior-knowledge from children is specific and predicted ( this need to be always false in normal mode )
    exists( PriorKnowledge( isSpecific == true, prediction == TruthValuePowerSet.T ) from $children )


    // Merge all prediction from children together which have his prediction known (example: {{N}} is filtered so {{N}} with {{T}} give {{T}})
    $predictionFromChildren: TruthValuePowerSet( ) from accumulate(  $child: Predictable( ) from $children,
                                                                                                    init  ( EnumSet truthfulness = EnumSet.noneOf( TruthValuePowerSet.class );  ),
                                                                                                    action( if( $child.getPrediction() != TruthValuePowerSet.N && $child.getPrediction() != TruthValuePowerSet.NT ) truthfulness.add( $child.getPrediction() ); ),
                                                                                                    result( TruthValuePowerSet.merge( truthfulness ) )
                                                                                                 )
    // Select the relation which link a prediction set to $pk
    $predToPk: Relation( source isA PredictionSet, target == $pk, type == RelationType.PREDICTION )
    // Add the direct prediction to merged set of all prediction from children ( example: {{T}} add {N} give {{T}})
    $directPrediction: TruthValueSet( this == ((PredictionSet)$predToPk.getSource()).getPrediction() )
    $result: TruthValuePowerSet( this != $pk.getPrediction(), this == TruthValuePowerSet.add( $predictionFromChildren, $directPrediction ) )

    $pk_parents: Set( ) from accumulate(   $rel: Relation(  target isA PriorKnowledge,
                                                            source == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getTarget() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setPrediction( $result )
    };
    for( final Object obj : $pk_parents){
        final PriorKnowledge parent = (PriorKnowledge)obj;
        update(parent);
    }
end


rule "Prior-knowledge is part of another prior-knowledge [expectation]" agenda-group "prior-knowledge expectation" when
    // Select any prior-knowledge
    $pk: PriorKnowledge( )
    // take the prior-knowledge list, where each concept is a parent of $pk and linked by a the relation part-of
    $parents: TruthValuePowerSet( size > 0 ) from accumulate(   $rel: Relation(   target  isA PriorKnowledge,
                                                                        source  ==  $pk,
                                                                        type    == RelationType.PART ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add( $rel.getTarget() ); ),
                                                    result( set )
                                                 )
    // all parents expectation is computed
    not( PriorKnowledge( expectation == TruthValuePowerSet.n ) from $parents )

     // Merge all expectation from parents together (example: {{N}} merged with {{T}} give {{N},{T}})
    $expectationFromParents: TruthValuePowerSet( ) from accumulate(   $parent: PriorKnowledge( ) from $parents,
                                                                                                    init  ( EnumSet truthfulness = EnumSet.noneOf( TruthValuePowerSet.class );  ),
                                                                                                    action( truthfulness.add( $parent.getExpectation() ); ),
                                                                                                    result( TruthValuePowerSet.merge( truthfulness ) )
                                                                                                 )
    // Select the relation which link a expectation set to $pk
    $expToPk: Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION )
    // Add the direct expectation to merged set of all prediction from parents ( example: {{T}} add {N} give {{T}})
    $directExpectation: TruthValueSet( this == ((ExpectationSet)$expToPk.getTarget()).getExpectation() )
    $result: TruthValuePowerSet( this != $pk.getExpectation(), this == TruthValuePowerSet.add( $expectationFromParents, $directExpectation ) )
    $pk_children: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge.class, target == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getSource() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setExpectation( $result )
    };
    for( final Object obj : $pk_children){
        final PriorKnowledge child = (PriorKnowledge)obj;
        update(child);
    }
end


rule "Prior-knowledge has subtype prior-knowledge [prediction]" agenda-group "prior-knowledge prediction" when
    // Select any prior-knowledge
    $pk: PriorKnowledge(  )
    // take the prior-knowledge list, where each concept is a child of $pk and linked by a the relation has-subtype
    $pk_children: Set( size > 0) from accumulate(   $rel: Relation( source   isA PriorKnowledge,
                                                                    target    == $pk,
                                                                    type      == RelationType.SUBTYPE  ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( if( ((PriorKnowledge)$rel.getSource()).getIsDispensable() == false )
                                                                                                                            set.add( $rel.getSource() );  ),
                                                    result( set )
                                                 )

    // all children prediction is computed
    not( PriorKnowledge( prediction == TruthValuePowerSet.n ) from $pk_children )

    // Choice the prediction with greatest truth degree  from children together (example: {{N}}, {{T}}, {{T,F}} choice is {{{T}} )
    $predictionFromChildren: TruthValuePowerSet( ) from accumulate(  $child: PriorKnowledge( ) from $pk_children,
                                                                    init  ( EnumSet truthfulness = EnumSet.noneOf( TruthValuePowerSet.class );  ),
                                                                    action( truthfulness.add( $child.getPrediction() ); ),
                                                                    result( TruthValuePowerSet.choice( truthfulness ) )
                                                                 )

    // Select the relation which link a expectation set to $pk
    $predToPk: Relation( source isA PredictionSet, target == $pk, type == RelationType.PREDICTION )
    // Add the direct expectation to merged set of all prediction from parents ( example: {{T}} add {N} give {{T}})
    $directPrediction: TruthValueSet( this == ((PredictionSet)$predToPk.getSource()).getPrediction() )
    $result: TruthValuePowerSet( this != $pk.getPrediction(), this == TruthValuePowerSet.add( $predictionFromChildren, $directPrediction ) )

    $pk_parents: Set( ) from accumulate(   $rel: Relation(  target isA PriorKnowledge, source == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getTarget() );),
                                            result( set )
                                         )
then
    modify( $pk ){
        setPrediction( $result )
    };
    for( final Object obj : $pk_parents){
        final PriorKnowledge parent = (PriorKnowledge)obj;
        update(parent);
    }
end


rule "Prior-knowledge is subtype of another prior-knowledge and has one of the greatest prediction truth value [expectation]" agenda-group "prior-knowledge expectation" when
    // Select any prior-knowledge
    $pk: PriorKnowledge( prediction != TruthValuePowerSet.n, isDispensable == false )
    // Select all parents of $pk
    $parents: Set( ) from accumulate(    $rel: Relation(  target isA PriorKnowledge, source == $pk, type == RelationType.SUBTYPE ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add(  $rel.getTarget() ); ),
                                                    result( set ) )
    // Parent expectation have not a false truth value
    not( PriorKnowledge( expectation ( == TruthValuePowerSet.F || == TruthValuePowerSet.n ) ) from $parents )

     // Merge all expectation from parents together (example: {{N}} merged with {{T}} give {{N},{T}})
    $expectationFromParents: TruthValuePowerSet( ) from accumulate( $parent: PriorKnowledge( ) from $parents,
                                                                    init  ( EnumSet truthfulness = EnumSet.noneOf( TruthValuePowerSet.class );  ),
                                                                    action( truthfulness.add( $parent.getExpectation() ); ),
                                                                    result( TruthValuePowerSet.merge( truthfulness ) ) )
    // take the parent prior-knowledge subtype-of $pk
    $relation: Relation(    target  isA PriorKnowledge,
                            source  ==  $pk,
                            type    ==  RelationType.SUBTYPE )
    $parent: PriorKnowledge( this == $relation.getTarget() )
    // Select all children of parent, $pk included
    $children_of_parent: Set( ) from accumulate(    $rel: Relation(  source isA PriorKnowledge, target == $parent ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add(  $rel.getSource() ); ),
                                                    result( set ) )
    // $pk has the one of greatest truth value degree from his prediction compared to all others children
    forall( PriorKnowledge( prediction.getTruth() <= $pk.getPrediction().getTruth(), prediction != TruthValuePowerSet.n ) from $children_of_parent )

    // Select the relation which link a expectation set to $pk
    $expToPk: Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION )
    // Add the direct expectation to merged set of all prediction from parents ( example: {{T}} add {N} give {{T}})
    $directExpectation: TruthValueSet( this == ((ExpectationSet)$expToPk.getTarget()).getExpectation() )
    $result: TruthValuePowerSet( this != $pk.getExpectation(), this == TruthValuePowerSet.add( $expectationFromParents, $directExpectation ) )

    $pk_children: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge, target == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getSource() ); ),
                                            result( set ) )
then
    modify( $pk ){
        setExpectation( $result )
    };
    for( final Object obj : $pk_children){
        final PriorKnowledge child = (PriorKnowledge)obj;
        update(child);
    }
end


rule "Prior-knowledge is subtype of another prior-knowledge and is not one of the greatest prediction truth value [expectation]" agenda-group "prior-knowledge expectation" when
    // Select any prior-knowledge
    $pk: PriorKnowledge( prediction != TruthValuePowerSet.n, isDispensable == false )
    // Select all parents of $pk
    $parents: Set( ) from accumulate(    $rel: Relation(  target isA PriorKnowledge, source == $pk, type == RelationType.SUBTYPE ),
                                                    init  ( Set set =  new HashSet();  ),
                                                    action( set.add(  $rel.getTarget() ); ),
                                                    result( set ) )
    // Parent expectation have not a false truth value
    not( PriorKnowledge( expectation ( == TruthValuePowerSet.F || == TruthValuePowerSet.n ) ) from $parents )

    // Merge all expectation from parents together (example: {{N}} merged with {{T}} give {{N},{T}})
    $expectationFromParents: TruthValuePowerSet( ) from accumulate( $parent: PriorKnowledge( ) from $parents,
                                                                    init  ( EnumSet truthfulness = EnumSet.noneOf( TruthValuePowerSet.class );  ),
                                                                    action( truthfulness.add( $parent.getExpectation() ); ),
                                                                    result( TruthValuePowerSet.merge( truthfulness ) ) )
    // take the parent prior-knowledge subtype-of $pk
    $relation: Relation(    target  isA PriorKnowledge,
                            source  ==  $pk,
                            type    ==  RelationType.SUBTYPE )
    // Parent expectation need to have a different truth value than $pk
    $parent: PriorKnowledge( this == $relation.getTarget() )
    // Select all children of parent, $pk included
    $children_of_parent: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge, target == $parent ),
                                                init  ( Set set =  new HashSet();  ),
                                                action( set.add(  $rel.getSource() ); ),
                                                result( set )
                                             )
    forall( PriorKnowledge( prediction != TruthValuePowerSet.n ) from $children_of_parent )
    // $pk has not one of greatest truth value degree from his prediction compared to all others children
    exists( PriorKnowledge( prediction.getTruth() > $pk.getPrediction().getTruth() ) from $children_of_parent )
    // Select the relation which link a expectation set to $pk
    $expToPk: Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION )
    // Add the direct expectation to merged set of all prediction from parents ( example: {{T}} add {N} give {{T}})
    $directExpectation: TruthValueSet( this == ((ExpectationSet)$expToPk.getTarget()).getExpectation() )
    $result: TruthValuePowerSet( this != $pk.getExpectation(), this == TruthValuePowerSet.add( TruthValuePowerSet.n, $directExpectation ) )

    $pk_children: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge.class, target == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getSource() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setExpectation( $result )
    };
    for( final Object obj : $pk_children){
        final PriorKnowledge child = (PriorKnowledge)obj;
        update(child);
    }
end




rule "Prior-knowledge is subtype of an not  an expected prior-knowledge [expectation]" agenda-group "prior-knowledge expectation" when
    // Select a prior-knowledge with a prediction different of {{F}}
    $pk: PriorKnowledge( expectation != TruthValuePowerSet.F )
    $relation: Relation(    target  isA PriorKnowledge,
                            source  ==  $pk,
                            type    ==  RelationType.SUBTYPE )
    // take the parent prior-knowledge subtype-of $pk
    $parent: PriorKnowledge( this == $relation.getTarget(), expectation == TruthValuePowerSet.F)
    // Select the relation which link a expectation set to $pk
    $expToPk: Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION )
    // Add the direct expectation to parent expectation ( example: {{T}} add {N} give {{T}})
    $directExpectation: TruthValueSet( this == ((ExpectationSet)$expToPk.getTarget()).getExpectation() )
    $result: TruthValuePowerSet( this != $pk.getExpectation(), this == TruthValuePowerSet.add( $parent.getExpectation(), $directExpectation ) )

    $pk_children: Set( ) from accumulate(  $rel: Relation(  source isA PriorKnowledge.class, target == $pk ),
                                            init  ( Set set =  new HashSet();  ),
                                            action( set.add(  $rel.getSource() ); ),
                                            result( set )
                                         )
then
    modify( $pk ){
        setExpectation( $result )
    };
    for( final Object obj : $pk_children){
        final PriorKnowledge child = (PriorKnowledge)obj;
        update(child);
    }
end
