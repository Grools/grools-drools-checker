/*
* Copyright LABGeM (2016)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;

import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.ExpectationSet;
import fr.cea.ig.grools.fact.ExpectationSetImpl;
import fr.cea.ig.grools.fact.PredictionSet;
import fr.cea.ig.grools.fact.PredictionSetImpl;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationImpl;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.logic.TruthValuePowerSet;
import fr.cea.ig.grools.fact.PriorKnowledge;

import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;

global ch.qos.logback.classic.Logger logger;

dialect "java"

rule "Create a prediction set related to a prior-knowledge" agenda-group  "observation set" when
    $pk     : PriorKnowledge()
    not( Relation( source isA PredictionSet, target == $pk, type == RelationType.PREDICTION ) )
then
    PredictionSet pred = new PredictionSetImpl( "predictions-"+$pk.getName(),
                                                "GROOLS",
                                                $pk.getLabel(),
                                                "",
                                                TruthValueSet.N );
    Relation predToPk = new RelationImpl( pred, $pk, RelationType.PREDICTION );
    insert( pred );
    insert( predToPk );
    modify( $pk ){
         setPrediction( TruthValuePowerSet.N )
    }
end

rule "Create a expectation set related to a prior-knowledge" agenda-group  "observation set" when
    $pk     : PriorKnowledge()
    not( Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION ) )

then
    ExpectationSet exp = new ExpectationSetImpl( "expectations-"+$pk.getName(),
                                                "GROOLS",
                                                $pk.getLabel(),
                                                "",
                                                TruthValueSet.N );
    Relation expToPk = new RelationImpl( $pk, exp, RelationType.EXPECTATION );
    insert( exp );
    insert( expToPk );
    modify( $pk ){
        setExpectation( TruthValuePowerSet.N )
    };
end

rule "Computation need to be linked to a prediction set" agenda-group  "observation set" when
    $pk         : PriorKnowledge()
    $predToPk   : Relation( source isA PredictionSet, target == $pk, type == RelationType.PREDICTION )
    $obsToPk    : Relation(   source    isA Observation,
                              target    == $pk,
                              type      == ObservationType.COMPUTATION )
then
    insert( new RelationImpl( $obsToPk.getSource(), $predToPk.getSource(), $obsToPk.getType() ) );
    retract( $obsToPk );
    update( $pk );
end

rule "Experimentation need to be linked to an expectation set" agenda-group  "observation set" when
    $pk         : PriorKnowledge()
    $expToPk    : Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION )
    $obsToPk    : Relation(   source    isA Observation,
                              target    == $pk,
                              type      == ObservationType.EXPERIMENTATION )
then
    insert( new RelationImpl( $obsToPk.getSource(), $expToPk.getTarget(), $obsToPk.getType() ) );
    retract( $obsToPk );
    update( $pk );
end

rule "Annotation need to be linked to a prediction set and an expectation set" agenda-group  "observation set" when
    $pk         : PriorKnowledge()
    $predToPk   : Relation( source isA PredictionSet,  target == $pk, type == RelationType.PREDICTION )
    $expToPk    : Relation( target isA ExpectationSet, source == $pk, type == RelationType.EXPECTATION )
    $obsToPk    : Relation(   source    isA Observation,
                              target    == $pk,
                              type      == ObservationType.ANNOTATION )
then
    insert( new RelationImpl( $obsToPk.getSource(), $predToPk.getSource(), $obsToPk.getType() ) );
    insert( new RelationImpl( $obsToPk.getSource(), $expToPk.getTarget(), $obsToPk.getType() ) );
    retract( $obsToPk );
end

rule "Prior-knowledge has prediction set" agenda-group  "observation" when
    $pk         : PriorKnowledge()
    $predToPk   : Relation( source isA PredictionSet, target == $pk, type == RelationType.PREDICTION )
    $pred       : PredictionSet( this == $predToPk.getSource() )
    $obsToPk    : Set( ) from collect( Relation(    source isA Observation.class,
                                                    target == $pred,
                                                    type ( == ObservationType.COMPUTATION || == ObservationType.ANNOTATION ) ) )
    $obsSet : Set() from accumulate( $rel: Relation(  ) from $obsToPk,
                                        init  ( Set set =  new HashSet(); ),
                                        action( set.add( $rel.getSource() ); ),
                                        result( set ) )
    $directPrediction: TruthValueSet( this != $pred.getPrediction() ) from accumulate(   $obs: Observation( ) from $obsSet ,
                                                                init  ( EnumSet set =  EnumSet.noneOf(TruthValue.class);  ),
                                                                action( set.add( $obs.getTruthValue() ); ),
                                                                result( TruthValue.union( set ) ) )
then
    modify( $pred ){
         setPrediction( $directPrediction )
    }
    modify( $pk ){
         setPrediction( TruthValueSet.union( $directPrediction ) )
    }
end

rule "Prior-knowledge has expectation set" agenda-group  "observation" when
    $pk        : PriorKnowledge()
    $expToPk   : Relation( target isA ExpectationSet.class, source == $pk, type == RelationType.EXPECTATION )
    $exp       : ExpectationSet( this == $expToPk.getTarget() )
    $obsToPk : Set( ) from collect( Relation(  source isA Observation.class,
                                                        target == $exp,
                                                        type ( == ObservationType.EXPERIMENTATION || == ObservationType.ANNOTATION ) ) )
    $obsSet : Set() from accumulate( $rel: Relation(  ) from $obsToPk,
                                            init  ( Set set =  new HashSet(); ),
                                            action( set.add( $rel.getSource() ); ),
                                            result( set ) )
    $directExpectation: TruthValueSet( this != $exp.getExpectation() ) from accumulate(   $obs: Observation( ) from $obsSet ,
                                                                init  ( EnumSet set =  EnumSet.noneOf(TruthValue.class);  ),
                                                                action( set.add( $obs.getTruthValue() ); ),
                                                                result( TruthValue.union( set ) ) )

then
    modify( $exp ){
        setExpectation( $directExpectation )
    };
    modify( $pk ){
        setExpectation( TruthValueSet.union(  $directExpectation ) )
    };
end
