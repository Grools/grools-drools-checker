/*
* Copyright LABGeM (2014)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;
import fr.cea.ig.grools.fact.Concept;
import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.PriorKnowledge;
import fr.cea.ig.grools.fact.PredictionSet;
import fr.cea.ig.grools.fact.ExpectationSet;
import fr.cea.ig.grools.fact.Predictable;
import fr.cea.ig.grools.fact.Expectable;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.fact.RelationImpl;
import fr.cea.ig.grools.logic.TruthValue;
import fr.cea.ig.grools.logic.TruthValueSet;
import fr.cea.ig.grools.logic.TruthValuePowerSet;

import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;

global ch.qos.logback.classic.Logger logger;

dialect "java"

rule "Predictable is specific to a given priorKnowledge" agenda-group "specific" when
    $rel: Relation(source isA Predictable, target isA PriorKnowledge.class, type ( == RelationType.PART || == RelationType.SUBTYPE ) )
    $source: PriorKnowledge( this == $rel.source, isSpecific == false )
    $target: PriorKnowledge( this == $rel.target)
    not( Relation(source == $source, target isA PriorKnowledge.class && target != $target, type (== RelationType.PART || == RelationType.SUBTYPE  ) ) )
    //not( Relation(source isA PriorKnowledge.class, target == $source ) ) // only on leaf
    exists( Relation(source (isA PriorKnowledge.class && != $source), target == $target, type == RelationType.PART ) ) // parent prior-knowledge have more than one child
then
    modify($source){
        setIsSpecific( true )
    }
end


rule "Predictable is not specific to a given priorKnowledge" agenda-group "specific" when
    $rel: Relation(source isA Predictable.class, target isA PriorKnowledge.class, type (== RelationType.PART || == RelationType.SUBTYPE  ) )
    $source: Predictable( this == $rel.source, isSpecific == true )
    $target: PriorKnowledge( this == $rel.target)
    exists( Relation(source == $source, target isA PriorKnowledge.class && target != $target, type (== RelationType.PART || == RelationType.SUBTYPE  ) ) )
then
    modify($source){
        setIsSpecific( false )
    }
end
