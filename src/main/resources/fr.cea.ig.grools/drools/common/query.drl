/*
* Copyright LABGeM (2014)
*
* author: Jonathan MERCIER
*
* Tis software is a computer program whose purpose is to annotate a complete genome.
*
* Tis software is governed by the CeCILL license under French law and
* abnameing by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provnameed only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In tis respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading tis means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/
package fr.cea.ig.grools;

import fr.cea.ig.grools.fact.Concept;
import fr.cea.ig.grools.fact.Observation;
import fr.cea.ig.grools.fact.ObservationType;
import fr.cea.ig.grools.fact.PriorKnowledge;
import fr.cea.ig.grools.fact.Relation;
import fr.cea.ig.grools.fact.RelationType;
import fr.cea.ig.grools.logic.TruthValue;
import fr.cea.ig.grools.logic.TruthValueSet;
import fr.cea.ig.grools.logic.TruthValuePowerSet;
import fr.cea.ig.grools.Mode;

import java.util.Set;
import java.util.EnumSet;
import java.util.HashSet;

dialect  "java"


query getConcepts(  )
    $concepts : Set() from collect ( Concept() )
end

query getPriorKnowledges(  )
    $priorKnowledges : Set() from collect ( PriorKnowledge() )
end

query getLeavesPriorKnowledges(  )
    $notLeaves: Set() from accumulate( $r: Relation(source isA PriorKnowledge, target isA PriorKnowledge),
                                                           init( Set $set = new HashSet(); ),
                                                           action( $set.add($r.getTarget() ); ),
                                                           result( $set )

                                     )
    $leaves : Set() from accumulate( $pk: PriorKnowledge(),
                                        init( Set $set = new HashSet(); ),
                                        action( if( ! $notLeaves.contains($pk) ) $set.add($pk); ),
                                        result( $set )
                                   )
end

query getTopsPriorKnowledges(  )
    $notTops: Set() from accumulate( $r: Relation(source isA PriorKnowledge, target isA PriorKnowledge),
                                                           init( Set $set = new HashSet(); ),
                                                           action( $set.add($r.getSource() ); ),
                                                           result( $set )

                                     )
    $tops : Set() from accumulate( $pk: PriorKnowledge(),
                                        init( Set $set = new HashSet(); ),
                                        action( if( ! $notTops.contains($pk) ) $set.add($pk); ),
                                        result( $set )
                                   )
end

query getConcept( String $name )
    $concept : Concept( name == $name )
end

query getRelations(  )
    $relations : Set() from collect ( Relation() )
end

query getRelationsUsingImpliedConcepts( Concept $source, Concept $target )
    $relations :Set() from collect ( Relation( source == $source, target == $target) )
end

query getRelationsWithSource( Concept $source )
    $relations :Set() from collect ( Relation( source == $source) )
end

query getRelationsWithTarget( Concept $target )
    $relations: Set() from collect ( Relation( target == $target  ) )
end

query getRelation( Concept $source, Concept $target, RelationType $type )
    $relation :Relation( source == $source, target == $target, type == $type)
end

query getObservations(  )
    $observations : Set() from collect ( Observation() )
end


query getObservationsRelatedToConcept( Concept $concept,  RelationType $relType )
    $out: Set() from accumulate( $r: Relation( source isA Observation.class, target == $concept,$relType memberOf type#ObservationType.getTypes( )),
                                                       init    ( Set $set = new HashSet();  ),
                                                       action  ( $set.add( $r.getSource() ); ),
                                                       result  ( $set )
                                                )
end


query getObservationsTruthValueRelatedToConcept( Concept concept, RelationType relType, TruthValueSet out )
    $value: Set() from accumulate( $r: Relation( source isA Observation.class, concept := target, relType memberOf type#ObservationType.getTypes( )),
                                                init(Set $set = EnumSet.noneOf(TruthValue.class); ),
                                                action( $set.add( ((Observation)$r.getSource()).getTruthValue() );  ),
                                                result( $set )
                                         )
    out := TruthValueSet( truthValueSet == $value )
end

query getObservation( String $name )
    $observation : Observation( name == $name )
end

query getPriorKnowledge( String $name )
    $priorknowledge : PriorKnowledge( name == $name )
end

query getMode(  )
    $mode : Mode()
end
